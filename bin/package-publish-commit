#!/usr/bin/env sh

################################################################################
# Commits changes, bumps up package version and publishes it.
#
# USAGE
# ./package-publish-commit version|patch|minor|major <package-dir> ...
#
# EXAMPLE
# ./package-publish-commit patch ./@downforce/*
################################################################################

set -e # errexit
set -u # nounset

case "$(dirname "$0")" in
    /*|./*) Dir=$(cd "$(dirname "$0")" && pwd);;
    *) Dir=$(cd "$PWD/$(dirname "$0")" && pwd);;
esac

usage() {
    echo
    echo "USAGE: $(basename "$0") --help,-h"
    echo "USAGE: $(basename "$0") version|patch|minor|major <package-dir> ..."
    echo
}

: ${Git:=git}
: ${Npm:=npm}

if test $# -lt 2; then
    usage
    exit 1
fi

case $1 in
    --help|-h) shift; usage; exit 0
    ;;
esac

arg_version=$1
shift

for pkg; do
    if test ! -e "$pkg/package.json"; then
        echo "skipping invalid package '$pkg'."
        continue
    fi

    pkg_name=$(npm --prefix "$pkg" pkg get name | tr -d '"')

    $Npm --prefix "$pkg" run --if-present build

    dirty=$($Git -C "$pkg" status --porcelain . | tail -n1)
    if test -n "$dirty"; then
        $Git -C "$pkg" add --all .
        $Git -C "$pkg" commit --edit --message "($pkg_name) "
    fi

    "$Dir/package-publish" $arg_version "$pkg"

    pkg_version=$(npm --prefix "$pkg" pkg get version | tr -d '"')

    dirty=$($Git -C "$pkg" status --porcelain . | tail -n1)
    if test -n "$dirty"; then
        $Git -C "$pkg" add --all .
        $Git -C "$pkg" commit --message "($pkg_name) v$pkg_version"
    fi
done
