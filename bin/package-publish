#!/usr/bin/env sh

################################################################################
# Bumps up a package version and publishes it.
#
# USAGE
# ./package-publish version|patch|minor|major <package-dir> ...
#
# EXAMPLE
# ./package-publish patch ./@downforce/*
################################################################################

set -e # errexit
set -u # nounset

case "$(dirname "$0")" in
    /*|./*) Dir=$(cd "$(dirname "$0")" && pwd);;
    *) Dir=$(cd "$PWD/$(dirname "$0")" && pwd);;
esac

usage() {
    echo
    echo "USAGE: $(basename "$0") --help,-h"
    echo "USAGE: $(basename "$0") version|patch|minor|major <package-dir> ..."
    echo
}

: ${Npm:=npm}
: ${NpmVersionCmd:=version}
: ${NpmVersionArgs:=--no-git-tag-version}
: ${NpmPublishCmd:=publish}
: ${NpmPublishArgs:=--access public --auth-type legacy}

if test $# -lt 2; then
    usage
    exit 1
fi

case $1 in
    --help|-h) shift; usage; exit 0
    ;;
esac

arg_version=$1
shift

for pkg; do
    if test ! -e "$pkg/package.json"; then
        echo "skipping invalid package '$pkg'."
        continue
    fi

    (
        case "$pkg" in
            /*|./*) cd "$pkg";;
            *) cd "$PWD/$pkg";;
        esac

        if test "$arg_version" != version; then
            set -- $NpmVersionCmd $NpmVersionArgs $arg_version
            $Npm "$@"

            printf -- 'Press Enter to continue'
            read answer
        fi

        set -- $NpmPublishCmd $NpmPublishArgs
        until $Npm "$@"; do
            printf -- 'Press Enter to retry'
            read answer
        done
    )
done
